# Generated by Django 4.2.15 on 2025-08-09 07:57

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(max_length=15, unique=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_code', models.CharField(blank=True, max_length=6, null=True)),
                ('groups', models.ManyToManyField(blank=True, related_name='custom_users', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='custom_users', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Tuman Shahar',
                'verbose_name_plural': 'Tumanlar Shaharlar',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
            ],
            options={
                'verbose_name': 'Lokatsiya',
                'verbose_name_plural': 'Lokatsiyalar',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Qabriston nomi')),
                ('description', models.TextField(blank=True, default='', verbose_name='Izoh')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='maskan.category', verbose_name='Tuman/Shahar')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='maskan.location', verbose_name='Lokatsiya')),
            ],
            options={
                'verbose_name': 'Qabriston',
                'verbose_name_plural': 'Qabristonlar',
            },
        ),
        migrations.CreateModel(
            name='Qabristonmap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('yosh', models.PositiveIntegerField(blank=True, null=True, verbose_name='Yosh')),
                ('ism_familiyasi_marhum', models.CharField(blank=True, max_length=20)),
                ('years_old', models.CharField(blank=True, max_length=4, validators=[django.core.validators.RegexValidator(message='Faqat 4 xonali yil kiriting, masalan: 1990 yoki 2023', regex='^\\d{4}$')], verbose_name='Tugâ€˜ilgan yil')),
                ('years_new', models.CharField(blank=True, max_length=4, validators=[django.core.validators.RegexValidator(message='Faqat 4 xonali yil kiriting, masalan: 1990 yoki 2023', regex='^\\d{4}$')], verbose_name='Vafot yili')),
                ('years', models.CharField(blank=True, max_length=20)),
                ('qator', models.CharField(blank=True, max_length=20)),
                ('qabr_soni', models.CharField(blank=True, max_length=20)),
                ('status', models.CharField(choices=[('green', 'Yashil'), ('yellow', 'Sariq'), ('red', 'Qizil')], default='green', max_length=10)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='qabristonmaps', to='maskan.product', verbose_name='Qabriston')),
            ],
            options={
                'verbose_name': 'Marhum',
                'verbose_name_plural': 'Marhumlar',
            },
        ),
        migrations.CreateModel(
            name='Qabristonmap_image',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='uploads/cam/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='maskan.qabristonmap')),
            ],
            options={
                'verbose_name': 'qabrnig rasmi',
                'verbose_name_plural': 'Qabrning rasmlari',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(max_length=20, unique=True)),
                ('temp_pin', models.CharField(blank=True, max_length=12, null=True)),
                ('telegram_verified', models.BooleanField(default=False)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='uploads/products/', verbose_name='Rasm')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='maskan.product', verbose_name='Qabriston')),
            ],
            options={
                'verbose_name': 'Qabriston rasmi',
                'verbose_name_plural': 'Qabriston rasmlari',
            },
        ),
    ]
